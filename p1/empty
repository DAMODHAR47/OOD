
package problem1;

interface State{
	start();
	stop();
	pause();
	resume();
}
class Idle  implements State{ 
	start() { //logic }
	stop(){ throw new InvalidStateException(); }
	pause(){ throw new InvalidStateException(); }
	resume(){ throw new InvalidStateException(); }
}
class Running  implements State{
	start() { throw new InvalidStateException(); }
	stop() { //logic }
	pause() { //logic }
	resume() {  throw new InvalidStateException();  }
}
class Suspended  implements State{
	start() {  throw new InvalidStateException();  }
	stop() { //logic }
	pause() {  throw new InvalidStateException();  }
	resume() { //logic }
}
	
public class StopWatch {
	State state = new Idle();
	
	public void start(){
		state.start();
		state = new Running();
	}
	public void  stop(){
		state.stop();
		state = new Idle();
	}
	public void pause(){
		state.pause();
		state = new Suspended();
	}
	public boolean resume()	{
		state.resume();
		state = new Running();
	}
}
